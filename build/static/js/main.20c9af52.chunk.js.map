{"version":3,"sources":["lib/algorand.ts","lib/ipfs.ts","lib/validator.ts","lib/config.ts","lib/nft.ts","lib/metadata.ts","Minter.tsx","AlgorandWalletConnector.tsx","NFTViewer.tsx","Collection.tsx","NetworkSelector.tsx","App.tsx","index.tsx"],"names":["getClient","activeConf","algosdk","Algodv2","conf","algod","setOrUndef","addr","undefined","createToken","wallet","token","md","a","getDefaultAccount","getSuggested","suggested","create_txn","makeAssetCreateTxnWithSuggestedParamsFromObject","from","assetName","name","unitName","assetURL","url","assetMetadataHash","toHash","manager","reserve","clawback","freeze","total","Math","pow","decimals","defaultFrozen","suggestedParams","signTxn","create_txn_s","sendWait","result","rounds","getTransactionParams","do","txParams","lastRound","getToken","assetId","getAssetByID","getCollection","address","accountInformation","results","plist","push","Promise","all","assets","collectionRequests","map","NFT","fromToken","signed","client","sendRawTransaction","t","blob","txId","waitForConfirmation","console","error","timeout","Error","status","startround","currentround","pendingTransactionInformation","pending","length","statusAfterBlock","putToIPFS","file","storage","Web3Storage","storageToken","put","wrapWithDirectory","imgAdded","image","ipfsURL","toFile","getMimeTypeFromIpfs","req","Request","method","fetch","resp","headers","get","getMetaFromIpfs","body","text","parsed","JSON","parse","Metadata","validators","nft","urlMimeType","JSON_TYPE","metadataHash","Buffer","metadata","toString","validArc3","valid","validateArc3","tests","k","pass","require","getAddrUrl","idx","blockExplorer","getAsaUrl","id","activeConfKey","sessionGetActiveConf","ac","sessionStorage","getItem","parseInt","sessionSetActiveConf","setItem","ARC3_URL_SUFFIX","METADATA_FILE","asaURL","cid","resolveProtocol","endsWith","slice","chunks","split","ipfsGateway","imageIntegrity","arrayBuffer","buff","bytes","Uint8Array","hash","sha256","digest","Token","creator","this","p","params","index","substring","asset_id","fromAssetId","fromParams","omitRawAndEmpty","v","args","_raw","description","image_integrity","image_mimetype","background_color","external_url","external_url_integrity","external_url_mimetype","animation_url","animation_url_integrity","animation_url_mimetype","extra_metadata","localization","properties","Object","assign","fmt","hasOwnProperty","create","update","md_blob","Blob","type","File","stringify","Minter","props","history","useHistory","React","meta","setMeta","loading","setLoading","imgSrc","setImgSrc","fileObj","setFileObj","extraProps","setExtraProps","extraPropsVisible","setExtraPropsVisible","extraParamsVisible","setExtraParamsVisible","setCID","isMinting","setIsMinting","setToken","captureMetadata","handleSetTokenParams","e","tgt","target","value","checked","handleExtraPropUpdate","dataset","handleSetMyAddress","label","sw","alert","eprops","reduce","ep","integ","className","elevation","Elevation","TWO","Uploader","setFile","reader","FileReader","onload","readAsDataURL","size","helperText","labelFor","labelInfo","placeholder","onChange","rows","cols","event","onClick","minimal","outlined","large","isOpen","inline","defaultValue","min","max","fill","onValueChange","rightElement","intent","icon","splice","handleExtraPropRemove","rightIcon","MintDialog","handleSetNFT","handleCancelMint","disabled","onInputChange","stopPropagation","preventDefault","files","item","alt","src","isLoading","setIsLoading","title","Classes","DIALOG_BODY","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","AlgorandWalletConnector","selectorOpen","setSelectorOpen","sessionWallet","updateWallet","handleSelectedWallet","choice","currentTarget","allowedWallets","disconnect","SessionWallet","network","permissionCallback","connect","interval","connected","then","success","setInterval","clearInterval","walletOptions","entries","img","darkMode","displayName","onClose","addr_list","accts","substr","setAccountIndex","iconProps","accountIndex","NFTViewer","useParams","setNFT","loaded","setLoaded","subscribed","imgURL","mdProps","language","style","docco","wrapLongLines","arc3Invalids","test","rel","href","THREE","Collection","collection","setCollection","nfts","filter","NetworkSelector","network_list","cfg","selectNetwork","App","useState","setActiveConf","setSessionWallet","accountList","setAccounts","setConnected","collectionLink","Group","align","Alignment","LEFT","Heading","Divider","RIGHT","exact","path","children","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20c9af52.chunk.js","sourcesContent":["import { Wallet } from 'algorand-session-wallet';\nimport algosdk, {Algodv2, makeAssetCreateTxnWithSuggestedParamsFromObject} from 'algosdk'\nimport { NFT, Token } from './nft';\nimport { Metadata } from './metadata'\nimport { conf } from './config'\n\nfunction getClient(activeConf: number): Algodv2 {\n  return new algosdk.Algodv2(\"\", conf[activeConf].algod, \"\")\n}\n\n\nfunction setOrUndef(addr: string): string | undefined {\n  return addr===\"\"?undefined:addr\n}\n\nexport async function createToken(wallet: Wallet, activeConf: number, token: Token, md: Metadata): Promise<number> {\n    const addr      = wallet.getDefaultAccount()\n    const suggested = await getSuggested(activeConf, 10)\n\n    const create_txn =  makeAssetCreateTxnWithSuggestedParamsFromObject({\n        from: addr,\n        assetName: md.name,\n        unitName: md.unitName,\n        assetURL: token.url,\n        assetMetadataHash: md.toHash(),\n        manager: setOrUndef(token.manager),\n        reserve: setOrUndef(token.reserve),\n        clawback: setOrUndef(token.clawback),\n        freeze: setOrUndef(token.freeze),\n        total: Math.pow(10, token.decimals),\n        decimals: token.decimals,\n        defaultFrozen: token.defaultFrozen,\n        suggestedParams: suggested\n    })\n\n    const [create_txn_s]  = await wallet.signTxn([create_txn])\n\n    const result = await sendWait(activeConf, [create_txn_s])\n    return result['asset-index']\n}\n\nexport async function getSuggested(activeConf: number, rounds: number) {\n    const txParams = await getClient(activeConf).getTransactionParams().do();\n    return { ...txParams, lastRound: txParams['firstRound'] + rounds }\n}\n\nexport async function getToken(activeConf: number, assetId: number): Promise<any> {\n  return await getClient(activeConf).getAssetByID(assetId).do()\n}\n\nexport async function getCollection(activeConf: number, address: string): Promise<any[]> {\n  const results = await getClient(activeConf).accountInformation(address).do()\n\n  const plist = []\n  for(const a in results['assets']){\n    if(results['assets'][a]['amount']>0)\n      plist.push(getToken(activeConf, results['assets'][a]['asset-id']))\n  }\n\n  const assets = await Promise.all(plist)\n  const collectionRequests = assets.map((a)=>{ return NFT.fromToken(activeConf, a) })\n  return Promise.all(collectionRequests)\n}\n\nexport async function sendWait(activeConf: number, signed: any[]): Promise<any> {\n    const client = getClient(activeConf)\n    try {\n        const {txId} = await client.sendRawTransaction(signed.map((t)=>{return t.blob})).do()\n        const result = await waitForConfirmation(client, txId, 3)\n        return result \n    } catch (error) { \n        console.error(error)\n    }\n\n    return undefined \n}\n\nasync function waitForConfirmation(client, txId, timeout) {\n    if (client == null || txId == null || timeout < 0) {\n      throw new Error('Bad arguments.');\n    }\n\n    const status = await client.status().do();\n    if (typeof status === 'undefined')\n      throw new Error('Unable to get node status');\n\n    const startround = status['last-round'] + 1;\n    let currentround = startround;\n  \n    /* eslint-disable no-await-in-loop */\n    while (currentround < startround + timeout) {\n      const pending = await client \n        .pendingTransactionInformation(txId)\n        .do();\n\n      if (pending !== undefined) {\n        if ( pending['confirmed-round'] !== null && pending['confirmed-round'] > 0) \n          return pending;\n  \n        if ( pending['pool-error'] != null && pending['pool-error'].length > 0) \n          throw new Error( `Transaction Rejected pool error${pending['pool-error']}`);\n      }\n\n      await client.statusAfterBlock(currentround).do();\n      currentround += 1;\n    }\n\n    /* eslint-enable no-await-in-loop */\n    throw new Error(`Transaction not confirmed after ${timeout} rounds!`);\n}","import { ipfsURL } from './nft'\nimport {Metadata} from './metadata'\nimport {conf} from './config'\n\n/*\n Currently an issue with resolving ipfs-car module in web3.storage when using react-scripts\n We just use the prebuilt one but with no types we have to just ignore the issue for now\n//import { Web3Storage } from 'web3.storage'\n*/\n// @ts-ignore\nimport { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js'\n\n\nexport async function putToIPFS(activeConf: number, file: File, md: Metadata): Promise<string> {\n    const storage = new Web3Storage({token: conf[activeConf].storageToken})\n    try {\n      const imgAdded = await storage.put([file], {wrapWithDirectory: false})\n      md.image = ipfsURL(imgAdded)\n\n      return await storage.put([md.toFile()], {wrapWithDirectory: false})\n\n    } catch (err) { console.error(err) }\n    return \"\"\n}\n\n\nexport async function getMimeTypeFromIpfs(url: string): Promise<string> {\n    const req = new Request(url, { method:\"HEAD\" })\n    const resp = await fetch(req)\n    return resp.headers.get(\"Content-Type\")\n}\n\n\nexport async function getMetaFromIpfs(url: string): Promise<Metadata> {\n    const req = new Request(url)\n    const resp = await fetch(req)\n    const body = await resp.blob()\n    const text = await body.text()\n    const parsed = JSON.parse(text)\n    return new Metadata({\"_raw\":text, ...parsed}) \n}\n\n\n","import {NFT, JSON_TYPE} from './nft'\n\nfunction mdurl(nft: NFT): boolean {\n    return nft.urlMimeType === JSON_TYPE \n}\n\nfunction mdhash(nft: NFT): boolean {\n    return nft.token.metadataHash === Buffer.from(nft.metadata.toHash(true)).toString(\"base64\") ||\n            nft.token.metadataHash === Buffer.from(nft.metadata.toHash()).toString(\"base64\")\n}\n\nfunction total(nft: NFT): boolean {\n    return (nft.token.total / Math.pow(10, nft.token.decimals)) === 1\n}\n\n// TODO: Check that metadata contains correct fields\n// TODO: Check that integrity hashes are valid\n\nconst validators = {\n    \"URL Points to metadata\": mdurl,\n    \"Metadata Hash matches\":mdhash,\n    \"Total Supply Is 1\": total,\n}\n\n\nexport function validArc3(nft: NFT): boolean {\n    if(!nft.valid()) return false\n\n    return validateArc3(nft).length === 0\n}\n\ninterface Arc3Test {\n    name: string\n    pass: boolean\n}\n\nexport function validateArc3(nft: NFT): Arc3Test[] {\n    const tests = []\n    for(const k in validators){\n        tests.push({name:k,pass:validators[k](nft)})\n    }\n    return tests \n}","type Config = {\n    network: string;       // The network to use for creating nfts\n    storageToken: string;  // The token provided by web3.storage\n    ipfsGateway: string;   // The IPFS gateway url for retrieving files\n    algod: string          // The Algod api url to use\n    blockExplorer: string; // The Block Explorer to allow linking out to\n}\n\nexport const conf = require(\"../config.json\") as Config[];\n\nexport function getAddrUrl(idx: number, addr: string): string {\n    return conf[idx].blockExplorer + \"address/\" + addr\n}\nexport function getAsaUrl(idx: number, id: number): string {\n    return conf[idx].blockExplorer + \"asset/\" + id \n}\n\nconst activeConfKey = \"active-conf\"\nexport function sessionGetActiveConf(): number {\n    const ac = sessionStorage.getItem(activeConfKey)\n    if(ac === undefined || ac === null) return 0\n    return parseInt(ac)\n}\n\nexport function sessionSetActiveConf(ac: number)  {\n    sessionStorage.setItem(activeConfKey, ac.toString())\n}\n","import { createToken, getToken } from \"./algorand\"\nimport { getMimeTypeFromIpfs, getMetaFromIpfs } from \"./ipfs\"\nimport { sha256 } from 'js-sha256'\nimport { Wallet } from \"algorand-session-wallet\"\nimport { conf } from \"./config\"\nimport {Metadata} from './metadata'\n\n/*\n\nThe following is a class and metadata type to support the ARC-0003 standard \nset forth by the Algorand Foundation and Community\n\nhttps://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0003.md\n\n*/\n\nexport const ARC3_NAME_SUFFIX = \"@arc3\"\nexport const ARC3_URL_SUFFIX = \"#arc3\"\nexport const METADATA_FILE = \"metadata.json\"\nexport const JSON_TYPE = 'application/json'\n\nexport function asaURL(cid: string): string { return ipfsURL(cid)+ARC3_URL_SUFFIX }\nexport function ipfsURL(cid: string): string { return \"ipfs://\"+cid }\nexport function fileURL(activeConf: number, cid: string, name: string): string { return conf[activeConf].ipfsGateway + cid+\"/\"+name }\n\nexport function resolveProtocol(activeConf: number, url: string): string {\n\n    if(url.endsWith(ARC3_URL_SUFFIX)) \n        url = url.slice(0, url.length-ARC3_URL_SUFFIX.length)\n\n    const chunks = url.split(\"://\")\n\n    // No protocol specified, give up\n    if(chunks.length < 2 ) return url\n\n    //Switch on the protocol\n    switch(chunks[0]){\n        case \"ipfs\": //Its ipfs, use the configured gateway\n            return conf[activeConf].ipfsGateway + chunks[1]\n        case \"https\": //Its already http, just return it\n            return url\n        // TODO: Future options may include arweave or algorand\n    }\n\n    return url\n}\n\nexport async function imageIntegrity(file: File): Promise<string> {\n    const buff = await file.arrayBuffer()\n    const bytes = new Uint8Array(buff)\n    const hash = new Uint8Array(sha256.digest(bytes));\n    return \"sha256-\"+Buffer.from(hash).toString(\"base64\")\n}\n\nexport class Token {\n    id:  number \n\n    name: string        \n    unitName: string    \n    url: string         \n\n    metadataHash: string\n\n    total: number       \n    decimals: number    \n\n    creator: string\n\n    manager: string\n    reserve: string\n    clawback: string\n    freeze: string\n\n    defaultFrozen: boolean\n    \n    constructor(t: any) {\n       this.id              = t.id || 0\n       this.name            = t.name || \"\"\n       this.unitName        = t.unitName || \"\"\n       this.url             = t.url || \"\"\n\n       this.metadataHash    = t.metadataHash || \"\"\n\n       this.total           = t.total || 0\n       this.decimals        = t.decimals || 0\n\n       this.creator         = t.creator || \"\"\n\n       this.manager         = t.manager || \"\"\n       this.reserve         = t.reserve || \"\"\n       this.clawback        = t.clawback || \"\"\n       this.freeze          = t.freeze || \"\"\n\n       this.defaultFrozen   = t.defaultFrozen || false\n    }\n\n    static fromParams(t: any ): Token {\n        const p  = t.params\n        return new Token({\n            id              : t.index,\n            name            : p.name || \"\",\n            unitName        : p['unit-name'] || \"\",\n            url             : p.url || \"\",\n            metadataHash    : p['metadata-hash'] || \"\",\n            total           : p.total || 0,\n            decimals        : p.decimals || 0,\n            creator         : p.creator || \"\",\n            manager         : p.manager || \"\",\n            reserve         : p.reserve || \"\",\n            clawback        : p.clawback || \"\",\n            freeze          : p.freeze || \"\",\n            defaultFrozen   : p['default-frozen'] || false,\n        }) as Token\n\n    }\n\n    valid(): boolean {\n        return this.id>0 && this.total>0 && this.url !== \"\"\n    }\n\n}\n\nexport class NFT {\n    token: Token = new Token({})\n    metadata: Metadata = new Metadata()\n\n    urlMimeType: string\n\n    constructor(md: Metadata, token?: Token, urlMimeType?: string) {\n        this.metadata = md\n        this.token = token\n        this.urlMimeType = urlMimeType\n    }\n\n    static async create(wallet: Wallet, activeConf:number, token: Token, md: Metadata, cid: string): Promise<NFT> {\n        token.url = asaURL(cid)\n        const asset_id = await createToken(wallet, activeConf, token, md)\n        return await NFT.fromAssetId(activeConf, asset_id)\n    }\n\n    static async fromAssetId(activeConf: number, assetId: number): Promise<NFT>{\n        return NFT.fromToken(activeConf, await getToken(activeConf, assetId))\n    }\n\n    static async fromToken(activeConf: number, t: any): Promise<NFT> {\n        const token = Token.fromParams(t)\n        const url = resolveProtocol(activeConf, token.url)\n\n        //TODO: provide getters for other storage options\n        // arweave? note field?\n\n        try {\n            const urlMimeType = await getMimeTypeFromIpfs(url)\n\n            switch(urlMimeType){\n                case JSON_TYPE:\n                    return new NFT(await getMetaFromIpfs(url), token, urlMimeType)\n            }\n\n            return new NFT(Metadata.fromToken(token), token, urlMimeType)\n        } catch (error) {\n            return new NFT(new Metadata(), token)    \n        }\n    }\n\n    valid(): boolean {\n       return this.token.valid() && this.metadata.valid()\n    }\n\n    name(): string {\n        if(this.metadata.valid()){\n            return this.metadata.name\n        }\n        if(this.token.valid()){\n            return this.token.name\n        }\n        return \"\"\n    }\n\n    id(): number {\n        return this.token.valid()? this.token.id : 0\n    }\n\n    imgURL(activeConf: number): string {\n        if(!this.valid()) return \"https://dummyimage.com/640x360/fff/aaa\"\n\n\n        // Try to resolve the protocol, if one is set \n        const url = resolveProtocol(activeConf, this.metadata.image)\n\n        // If the url is different, we resolved it correctly\n        if(url !== this.metadata.image) return url\n\n        // It may be a relative url stored within the same directory as the metadata file\n        // Lop off the METADATA_FILE bit and append image path \n        if(this.token.url.endsWith(METADATA_FILE)){\n            const dir = this.token.url.substring(0,this.token.url.length-METADATA_FILE.length)\n            return resolveProtocol(activeConf, dir)+this.metadata.image\n        }\n\n        // give up\n        return url \n    }\n}","import {Token, JSON_TYPE, METADATA_FILE} from './nft'\nimport { sha256 } from 'js-sha256'\n\nexport type Properties = {\n    [key: string]: string | number\n}\n\nexport type LocalizationIntegrity = {\n    [key: string]: string \n}\n\nexport type Localization = {\n    uri: string \n    default: string \n    locales: string[] \n    integrity?: LocalizationIntegrity\n}\n\n\nfunction omitRawAndEmpty(k,v){\n    if(k === \"_raw\") return undefined;\n    if(v === \"\") return undefined;\n    return v\n}\n\nexport class Metadata {\n    _raw: string = undefined\n\n    name: string = \"\"\n    description: string = \"\"\n\n    image: string = \"\"\n    decimals?: number = 0\n    unitName?: string = \"\"\n    image_integrity?: string = \"\"\n    image_mimetype?: string = \"\"\n\n    background_color?: string = \"\"\n    external_url?: string = \"\"\n    external_url_integrity?: string = \"\"\n    external_url_mimetype?: string = \"\"\n\n    animation_url?: string = \"\"\n    animation_url_integrity?: string = \"\"\n    animation_url_mimetype?: string = \"\"\n\n    extra_metadata?: string = \"\"\n\n    localization?: Localization\n\n    properties?: Properties\n\n    constructor(args: any = {}) { Object.assign(this, args) }\n\n    toHash(fmt: Boolean = false): Uint8Array {\n        if(this.hasOwnProperty(\"extra_metadata\")){\n            //TODO\n            //am = SHA-512/256(\"arc0003/am\" || SHA-512/256(\"arc0003/amj\" || content of JSON metadata file) || e)\n        }\n\n        if(this._raw === undefined) \n            this._raw = this.toString(false)\n\n        const hash = sha256.create();\n        fmt ? hash.update(this.toString(false)):hash.update(this._raw);\n        return new Uint8Array(hash.digest())\n    }\n\n    valid(): boolean {\n        return this.image !== \"\"\n    }\n\n    toFile(): File {\n        const md_blob = new Blob([this.toString()], { type: JSON_TYPE })\n        return new File([md_blob], METADATA_FILE)\n    }\n\n    toString(fmt: Boolean = false): string {\n        return JSON.stringify(JSON.parse(this._raw) , omitRawAndEmpty, fmt?2:0)\n    }\n\n    static fromToken(t: Token){\n        return new Metadata({name:t.name, image: t.url, decimals: t.decimals })\n    }\n}\n","import * as React from 'react'\nimport { InputGroup, Button, Elevation, FileInput, Card, Dialog, Classes, Collapse, NumericInput, FormGroup, Switch } from \"@blueprintjs/core\"\nimport {  NFT, Token, imageIntegrity } from './lib/nft'\nimport {Metadata} from './lib/metadata'\nimport { SessionWallet } from 'algorand-session-wallet'\nimport { putToIPFS } from './lib/ipfs'\nimport{ useHistory } from 'react-router-dom'\n\nexport type MinterProps = {\n    activeConf: number\n    sw: SessionWallet\n}\n\nexport function Minter(props: MinterProps){\n\n    const history = useHistory()\n\n    const [meta, setMeta]               = React.useState(new Metadata())\n    const [loading, setLoading]         = React.useState(false)\n    const [imgSrc, setImgSrc]           = React.useState<string>();\n    const [fileObj, setFileObj]         = React.useState<File>();\n\n    const [extraProps, setExtraProps]   = React.useState([])\n    const [extraPropsVisible, setExtraPropsVisible] = React.useState(false)\n\n    const [extraParamsVisible, setExtraParamsVisible] = React.useState(false)\n\n    // For MintDialog\n    const [cid, setCID]                 = React.useState(\"\")\n    const [isMinting, setIsMinting]     = React.useState(false)\n\n    const [token, setToken]             = React.useState(new Token({}))\n\n    function setFile(file: File) {\n        setFileObj(file)\n\n        const reader = new FileReader();\n        reader.onload = (e: any) => {  setImgSrc(e.target.result) }\n        reader.readAsDataURL(file);\n\n        setMeta((meta)=>{\n            return new Metadata({\n                ...meta,\n                image: file.name,\n                image_mimetype: file.type,\n                properties:{...meta.properties, size:file.size}\n            })\n        })\n    }\n\n\n    async function mintNFT() {\n        setLoading(true) \n\n        const md = await captureMetadata()\n        setMeta(md)\n\n        const cid = await putToIPFS(props.activeConf, fileObj, md)\n        setCID(cid)\n\n        setIsMinting(true)\n    }\n\n    function handleCancelMint(){\n        setIsMinting(false)\n        setLoading(false)\n    }\n\n    function handleSetNFT(nft: NFT){ return history.push(\"/nft/\"+nft.token.id) }\n\n    function handleChangeDecimals(v: number){ setToken((token)=>{ return new Token({...token, \"decimals\":v}) }) }\n    function handleSetTokenParams(e) {\n        const tgt = e.target\n        const name = e.target.id\n        const value = tgt.type === \"checkbox\" ? tgt.checked: tgt.value as string \n        setToken((token)=>{ return new Token({...token, [name]:value}) })\n    }\n\n    function handleChangeMeta(event: { target: any; }) {\n        const target = event.target\n        const name = target.name as string\n        const value = target.type === 'checkbox' ? target.checked : target.value as string\n        setMeta((meta)=>{ return  new Metadata({...meta, [name]:value}) })\n    }\n\n    function handleShowExtraProps(){ setExtraPropsVisible(!extraPropsVisible) }\n    function handleShowExtraParams(){ setExtraParamsVisible(!extraParamsVisible) }\n    function handleExtraPropRemove(idx: number) { extraProps.splice(idx, 1); setExtraProps([...extraProps]) }\n    function handleAddExtraProp() { setExtraProps([...extraProps, emptyExtraProp()]) }\n    function emptyExtraProp(){ return { name:\"\", value: \"\" } }\n    function handleExtraPropUpdate(e){\n        const idx=parseInt(e.target.dataset.id)\n        if(e.target.id===\"name\") extraProps[idx][e.target.id]=e.target.value\n        else extraProps[idx][e.target.id] = e.target.value\n        setExtraProps([...extraProps])\n    }\n\n\n    function handleSetMyAddress(label: string){\n        return (e)=>{\n            setToken((token)=>{ \n                const addr = props.sw.getDefaultAccount()\n                if(addr === \"\") alert(\"You need to connect you wallet before you can do this.\")\n                return new Token({...token, [label]: addr})\n            })\n        }\n    }\n\n\n    async function captureMetadata(): Promise<Metadata> {\n        const eprops = extraProps.reduce((all, ep)=>{ return {...all, [ep.name]:ep.value} }, {})\n        const integ = await imageIntegrity(fileObj)\n        return new Metadata({\n            name:           token.name,\n            unitName:       token.unitName,\n            decimals:       token.decimals,\n            description:    meta.description,\n            image_mimetype: meta.image_mimetype,\n            image_integrity:integ, \n            properties:     { ...eprops, ...meta.properties}\n        })\n    }\n\n    return (\n        <div className='container'>\n            <Card elevation={Elevation.TWO} className='mint-card' >\n                <Uploader\n                    imgSrc={imgSrc}\n                    setFile={setFile}\n                    {...meta} />\n\n                <div className='container' >\n                    <FormGroup \n                        helperText=\"The Name for this asset\"\n                        label=\"Name\"\n                        labelFor=\"name\"\n                        labelInfo=\"(required)\" >\n                        <InputGroup\n                            name='name'\n                            placeholder='Name'\n                            className='details-basic details-title bp3-InputGroup bp3-large'\n                            onChange={handleSetTokenParams}\n                            type='text'\n                            id='name'\n                            value={token.name} />\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"The Unit Name for this asset \"\n                        label=\"Unit Name\"\n                        labelFor=\"unitName\"\n                        labelInfo=\"(required)\" >\n                        <InputGroup\n                            name='unitName'\n                            placeholder='Unit Name'\n                            className='details-basic details-title bp3-InputGroup bp3-large'\n                            onChange={handleSetTokenParams}\n                            type='text'\n                            id='unitName'\n                            value={token.unitName} />\n                    </FormGroup>\n                </div>\n\n                <div className='container'>\n                    <FormGroup \n                        helperText=\"A description of this asset\"\n                        label=\"Description\"\n                        labelFor=\"description\"\n                        labelInfo=\"(required)\" >\n                        <textarea\n                            rows={10}\n                            cols={30}\n                            placeholder='Description'\n                            className='details-description bp3-InputGroup bp3-large'\n                            onChange={handleChangeMeta}\n                            name='description'\n                            id='description'\n                            value={meta.description} />\n                    </FormGroup>\n                </div>\n\n                <div className='container extra-param-dropdown'>\n                    <Button \n                        onClick={handleShowExtraParams}  \n                        minimal={true} \n                        outlined={true} \n                        large={true}\n                        text={extraParamsVisible?\"Hide extra parameters\":\"Show extra parameters\"} \n                    />\n                    <Collapse isOpen={extraParamsVisible}>\n                        <div className='container extra-param-list'>\n\n                        <FormGroup \n                            inline={true}\n                            helperText=\"A value of >0 is considered a 'Fractional NFT'\"\n                            label=\"Decimals\" labelFor=\"decimals\" >\n                            <NumericInput \n                                defaultValue={0} min={0} max={19} \n                                name='decimals'\n                                id='decimals' \n                                fill={true}\n                                onValueChange={handleChangeDecimals} />\n                        </FormGroup>\n\n                        <FormGroup\n                            inline={true}\n                            label=\"Default Frozen\" labelFor=\"default-frozen\" >\n                            <Switch large={true} name='default-frozen' id='defaultFrozen'  onChange={handleSetTokenParams} />\n                        </FormGroup>\n\n                        <FormGroup\n                            inline={true}\n                            helperText=\"The Manager Address for this asset\" \n                            label=\"Manager Address\" labelFor=\"manager\" >\n                            <InputGroup \n                            rightElement={<Button minimal={true} text='Me' onClick={handleSetMyAddress('manager')} />}\n                            value={token.manager}\n                            name='manager' id='manager'   type='text' onChange={handleSetTokenParams}/>\n                        </FormGroup>\n\n                        <FormGroup\n                            inline={true}\n                            helperText=\"The Reserve Address for this asset\" \n                            label=\"Reserve Address\" labelFor=\"reserve\" >\n                            <InputGroup \n                            rightElement={<Button minimal={true} text='Me' onClick={handleSetMyAddress('reserve')} />}\n                            value={token.reserve}\n                            name='reserve' id='reserve'   type='text'  onChange={handleSetTokenParams} />\n                        </FormGroup>\n\n                        <FormGroup\n                            inline={true}\n                            helperText=\"The Clawback Address for this asset\" \n                            label=\"Clawback Address\" labelFor=\"clawback\" >\n                            <InputGroup \n                            rightElement={<Button minimal={true} text='Me' onClick={handleSetMyAddress('clawback')} />}\n                            value={token.clawback}\n                            name='clawback' id='clawback'   type='text'  onChange={handleSetTokenParams} />\n                        </FormGroup>\n\n                        <FormGroup\n                            inline={true}\n                            helperText=\"The Freeze Address for this asset\" \n                            label=\"Freeze Address\" labelFor=\"freeze\" >\n                            <InputGroup \n                            rightElement={<Button minimal={true} text='Me' onClick={handleSetMyAddress('freeze')} />} value={token.freeze}\n                            name='freeze' id='freeze'  type='text'  onChange={handleSetTokenParams}/>\n                        </FormGroup>\n                        </div>\n\n                    </Collapse>\n                </div>\n\n                <div className='container extra-prop-dropdown'>\n                    <Button \n                        onClick={handleShowExtraProps}  \n                        minimal={true} \n                        outlined={true} \n                        large={true}\n                        text={extraPropsVisible?\"Hide extra props\":\"Show extra props\"} \n                    />\n                    <Collapse isOpen={extraPropsVisible} className='extra-prop-collapse'>\n                        <p>Add string keys and values</p>\n                        <ul className='extra-prop-list'>\n                        { \n                            extraProps.map((props, idx)=>{ \n                                return (\n                                <li className='extra-prop-item' key={idx} >\n                                    <div className='extra-prop-container'>\n                                        <InputGroup \n                                            id=\"name\" \n                                            data-id={idx}\n                                            name=\"name\" \n                                            value={props.name}  \n                                            onChange={handleExtraPropUpdate} \n                                            className='details-basic details-artist bp3-InputGroup bp3-large' />\n                                        <InputGroup \n                                            id=\"value\" \n                                            name=\"value\" \n                                            data-id={idx}\n                                            value={props.value} \n                                            onChange={handleExtraPropUpdate} \n                                            className='details-basic details-artist bp3-InputGroup bp3-large' />\n                                        <Button minimal={true} intent='danger' icon='cross' onClick={()=>{ handleExtraPropRemove(idx) }}  />\n                                    </div>\n                                </li>\n                                )\n                            })\n                        }\n                        </ul>\n                        <Button fill={true} icon='plus' intent='primary' minimal={true} onClick={handleAddExtraProp} className='extra-prop-add' />\n                    </Collapse>\n                </div>\n\n                <div className='container custom-note-field'>\n\n                </div>\n\n                <div className='container container-mint'>\n                    <Button loading={loading}\n                        onClick={mintNFT}\n                        rightIcon='clean'\n                        large={true}\n                        minimal={true}\n                        outlined={true}\n                        intent='success'\n                        text='Mint' />\n                </div>\n            </Card>\n            <MintDialog \n                activeConf={props.activeConf}\n                token={token}\n                isMinting={isMinting} \n                cid={cid} \n                md={meta} \n                sw={props.sw}  \n                handleSetNFT={handleSetNFT}\n                handleCancelMint={handleCancelMint} \n                ></MintDialog>\n        </div>\n    )\n\n}\n\ntype UploaderProps = {\n    imgSrc: string | undefined\n    setFile(f: File): void\n};\n\nfunction Uploader(props: UploaderProps) {\n    function captureFile(event: any) {\n        event.stopPropagation()\n        event.preventDefault()\n        props.setFile(event.target.files.item(0))\n    }\n\n    if (props.imgSrc === undefined || props.imgSrc === \"\" ) return (\n        <div className='container'>\n            <div className='content content-piece' >\n                <FileInput large={true} disabled={false} text=\"Choose file...\" onInputChange={captureFile} />\n            </div>\n        </div>\n    )\n\n\n    return (\n        <div className='container' >\n            <div className='content content-piece'>\n                <img id=\"gateway-link\" alt=\"NFT\" src={props.imgSrc} />\n            </div>\n        </div>\n    )\n}\n\ntype MintDialogProps = {\n    activeConf: number\n    isMinting: boolean\n    cid: string\n    md: Metadata\n    sw: SessionWallet\n    token: Token \n    handleSetNFT(NFT)\n    handleCancelMint()\n}\n\nfunction MintDialog(props: MintDialogProps){\n    const [isLoading, setIsLoading] = React.useState(false)\n\n    function cancel(){\n        setIsLoading(false)\n        props.handleCancelMint()\n    }\n\n    async function mint(){\n        try {\n            setIsLoading(true)\n            const nft = await NFT.create(props.sw.wallet, props.activeConf, props.token, props.md, props.cid)\n            setIsLoading(false)\n            props.handleSetNFT(nft)\n        } catch (error) {\n           alert(\"Failed to create nft: \"+error) \n           setIsLoading(false)\n           props.handleCancelMint()\n        }\n    }\n\n    return (\n        <Dialog isOpen={props.isMinting} title=\"Mint it\" >\n            <div className={Classes.DIALOG_BODY}>\n                <p>File uploaded to ipfs {props.md.image} </p>\n                <p>Click \"Mint\" to create ASA</p>\n            </div>\n            <div className={Classes.DIALOG_FOOTER}>\n                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                    <Button loading={isLoading} onClick={cancel}>Cancel</Button>\n                    <Button loading={isLoading} onClick={mint}>Mint</Button>\n                </div>\n            </div>\n        </Dialog>\n    )\n}","import * as React from 'react'\n\nimport { SessionWallet, allowedWallets } from 'algorand-session-wallet'\n\nimport { Dialog, Button, Classes, HTMLSelect, Intent } from '@blueprintjs/core'\nimport { IconName } from '@blueprintjs/icons'\n\n\ntype AlgorandWalletConnectorProps = {\n    darkMode: boolean\n    connected: boolean\n    accts: string[]\n    sessionWallet: SessionWallet\n    updateWallet(sw: SessionWallet): void\n}\n\nexport default function AlgorandWalletConnector(props:AlgorandWalletConnectorProps)  {\n\n    const [selectorOpen, setSelectorOpen] = React.useState(false)\n\n    const {sessionWallet,updateWallet} = props\n    React.useEffect(()=>{\n        if(sessionWallet.connected()) return\n\n        let interval: any\n        sessionWallet.connect().then((success)=>{\n            if(!success) return\n\n            // Check every 500ms to see if we've connected then kill the interval\n            // This is most useful in the case of walletconnect where it may be several \n            // seconds before the user connects\n            interval = setInterval(()=>{\n                if(sessionWallet.connected()) {\n                    clearInterval(interval)\n                    updateWallet(sessionWallet)\n                }\n            }, 500)\n\n        })\n\n        return ()=>{ clearInterval(interval) }\n\n    }, [sessionWallet, updateWallet])\n\n\n    function disconnectWallet() { \n        props.sessionWallet.disconnect()\n        props.updateWallet(new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback)) \n    }\n\n    function handleDisplayWalletSelection() { setSelectorOpen(true) }\n\n    async function handleSelectedWallet(e: any) {\n        const choice = e.currentTarget.id\n\n        if(!(choice in allowedWallets)) {\n            if(props.sessionWallet.wallet !== undefined) props.sessionWallet.disconnect()\n            return setSelectorOpen(false)\n        }\n\n        const sw = new SessionWallet(props.sessionWallet.network, props.sessionWallet.permissionCallback, choice)\n\n        if(!await sw.connect()) {\n            sw.disconnect()\n        }\n\n        props.updateWallet(sw)\n\n        setSelectorOpen(false)\n    }\n\n    function handleChangeAccount(e: any) {\n        props.sessionWallet.setAccountIndex(parseInt(e.target.value))\n        props.updateWallet(props.sessionWallet)\n    }\n\n    const walletOptions = []\n    for(const [k,v] of Object.entries(allowedWallets)){\n        walletOptions.push((\n        <li key={k}>\n            <Button id={k}\n                large={true} \n                fill={true} \n                minimal={true} \n                outlined={true} \n                onClick={handleSelectedWallet}\n                > \n                <div className='wallet-option'>\n                    <img alt='wallet-branding' className='wallet-branding' src={  v.img(props.darkMode)} />\n                    <h5>{v.displayName()}</h5>\n                </div>\n                </Button>\n        </li>\n        ))\n    }\n\n    if (!props.connected) return (\n        <div>\n            <Button\n                minimal={true}\n                rightIcon='selection'\n                intent='warning'\n                outlined={true}\n                onClick={handleDisplayWalletSelection}>Connect Wallet</Button>\n\n            <Dialog isOpen={selectorOpen} title='Select Wallet' onClose={handleSelectedWallet} >\n                <div className={Classes.DIALOG_BODY}>\n                    <ul className='wallet-option-list'>\n                        {walletOptions}\n                    </ul>\n                </div>\n            </Dialog>\n        </div>\n    )\n\n\n    const addr_list = props.accts.map((addr, idx) => {\n        return (<option value={idx} key={idx}> {addr.substr(0, 8)}...  </option>)\n    })\n\n    const iconprops = { \n        icon: 'symbol-circle' as IconName, \n        intent: 'success'  as Intent\n    }\n\n    return (\n        <div>\n            <HTMLSelect \n                onChange={handleChangeAccount} \n                minimal={true} \n                iconProps={iconprops} \n                defaultValue={props.sessionWallet.accountIndex()} >\n                {addr_list}\n            </HTMLSelect>\n            <Button icon='log-out' minimal={true} onClick={disconnectWallet} ></Button>\n        </div>\n    )\n}","import * as React from 'react'\nimport { Elevation, Card, Icon } from \"@blueprintjs/core\"\nimport { NFT, resolveProtocol  } from './lib/nft'\nimport { Metadata } from './lib/metadata'\nimport { SessionWallet } from 'algorand-session-wallet'\nimport {useParams} from 'react-router-dom'\nimport { getAddrUrl, getAsaUrl } from './lib/config'\nimport { validateArc3 } from './lib/validator'\n\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { docco } from  'react-syntax-highlighter/dist/esm/styles/hljs'\n\nexport type NFTViewerProps = {\n    activeConf: number\n    sw: SessionWallet\n}\n\nexport function NFTViewer(props: NFTViewerProps) {\n    const {assetId} = useParams()\n\n    const [nft, setNFT] = React.useState(new NFT(new Metadata()))\n    const [loaded, setLoaded] = React.useState(false)\n\n    React.useEffect(()=>{\n        setLoaded(false)\n\n        let subscribed = true\n\n        NFT.fromAssetId(props.activeConf, assetId).then((nft)=>{ \n            if(!subscribed) return\n\n            setNFT(nft) \n            setLoaded(true)\n        })\n\n        return ()=>{ subscribed = false }\n    }, [assetId, props.activeConf])\n\n    let img = <div></div>\n    let meta = <div></div>\n\n    if(loaded){\n        img = <img alt='nft' className='bp3-elevation-3' src={nft.imgURL(props.activeConf)}/>\n\n        const mdProps = nft.metadata && nft.metadata[\"_raw\"] !== undefined?(\n            <div className='raw-metadata'>\n                <SyntaxHighlighter language='json' style={docco} wrapLongLines={true}  >\n                    {nft.metadata.toString(true)}\n                </SyntaxHighlighter>\n            </div>\n        ):<p>No metadata</p>\n\n        const arc3Invalids = validateArc3(nft).map(test=>{\n            if(test.pass)\n                return (<li key={test.name} >  <Icon icon='tick' intent='success' /> <b>{test.name}</b></li>) \n\n            return (<li key={test.name} > <Icon icon='cross' intent='danger' /> <b>{test.name}</b> </li>) \n        })\n\n        meta = (\n        <div>\n            <h5>Token Parameters</h5>\n            <div className='content'>\n                <table>\n                    <tbody>\n                        <tr><td><b>ASA id: </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAsaUrl(props.activeConf, nft.token.id)} >{nft.token.id}</a></td></tr>\n                        <tr><td><b>Name:</b></td><td>{nft.token.name}</td></tr>\n                        <tr><td><b>Unit Name:</b></td><td>{nft.token.unitName}</td></tr>\n                        <tr><td><b>Total:</b></td><td>{nft.token.total}</td></tr>\n                        <tr><td><b>Decimals:</b></td><td>{nft.token.decimals}</td></tr>\n                        <tr><td><b>URL:     </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={resolveProtocol(props.activeConf, nft.token.url)} >{nft.token.url}</a></td></tr>\n                        <tr><td><b>Creator: </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAddrUrl(props.activeConf, nft.token.creator)}  >{nft.token.creator}</a></td></tr>\n                        <tr><td><b>Manager: </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAddrUrl(props.activeConf, nft.token.manager)}  >{nft.token.manager}</a></td></tr>\n                        <tr><td><b>Reserve: </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAddrUrl(props.activeConf, nft.token.reserve)}  >{nft.token.reserve}</a></td></tr>\n                        <tr><td><b>Freeze:  </b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAddrUrl(props.activeConf, nft.token.freeze) }  >{nft.token.freeze }</a></td></tr>\n                        <tr><td><b>Clawback:</b></td><td><a rel=\"noreferrer\" target=\"_blank\" href={getAddrUrl(props.activeConf, nft.token.clawback)} >{nft.token.clawback}</a></td></tr>\n                        <tr><td><b>Metadata Hash: </b></td><td>{nft.token.metadataHash}</td></tr>\n                        <tr><td><b>Default Frozen: </b></td><td>{nft.token.defaultFrozen?\"Yes\":\"No\"}</td></tr>\n                    </tbody>\n                </table>\n            </div>\n            <hr/>\n            <h5>Metadata</h5>\n            <div className='content'>\n                {mdProps}\n            </div>\n            <hr/> \n            <h5>ARC3 tests:</h5>\n            <div className='content'>\n                <ul>\n                    {arc3Invalids}\n                </ul>\n            </div>\n        </div>\n        )\n    }\n\n    return (\n        <div className='container'>\n            <Card elevation={Elevation.THREE} >\n                <div className='container'> \n                    <div className='content content-piece'>\n                        {img}       \n                    </div>\n                    <div className='content-info'>\n                        {meta}\n                    </div>\n                </div>\n            </Card>\n        </div>\n    )\n}","import * as React from 'react'\nimport { Elevation, Card, AnchorButton } from \"@blueprintjs/core\"\nimport { SessionWallet } from 'algorand-session-wallet'\nimport {useParams} from 'react-router-dom'\nimport { conf } from './lib/config'\nimport {getCollection} from './lib/algorand' \nimport { validArc3 } from './lib/validator'\n\nexport type CollectionProps = {\n    activeConf: number\n    sw: SessionWallet\n}\n\nexport function Collection(props: CollectionProps) {\n    const {address} = useParams()\n\n    const [collection, setCollection] = React.useState([])\n    const [loaded, setLoaded] = React.useState(false)\n\n    React.useEffect(()=>{\n        setLoaded(false)\n        getCollection(props.activeConf, address).then((collection)=>{\n            setCollection(collection)\n            setLoaded(true)\n        })\n    }, [address, props.activeConf])\n\n    let nfts = [<h3 key='looking'>Checking for NFTs...</h3>]\n    if(loaded ){\n        if(collection.length>0){\n            nfts = collection.filter((nft)=>{\n                return nft.id() !== 0\n            }).map((nft)=>{\n                const icon = validArc3(nft)?\"confirm\":\"circle\"\n                return (\n                <Card className='content-collection-item' key={nft.id()} elevation={Elevation.TWO}>\n                    <img alt='nft content' src={nft.imgURL(props.activeConf)} />\n                    <AnchorButton icon={icon} minimal={true} href={'/nft/'+nft.id()}><b>{nft.name()}</b></AnchorButton>\n                </Card>\n                )\n            })\n        }else{\n            nfts = [<h3 key='none'>You dont have any ARC3 compliant NFTs on {conf[props.activeConf].network}, <a href='/mint'>Mint one?</a></h3>]\n        }\n    }\n    return (\n    <div className='container'>\n        <div className='content content-collection'>\n            {nfts}\n        </div>\n    </div>\n    )\n}","import { HTMLSelect } from '@blueprintjs/core'\nimport React from 'react'\nimport {conf} from './lib/config'\n\ninterface NetworkSelectorProps {\n    activeConf: number\n    selectNetwork(network: number)\n}\n\nexport function NetworkSelector(props: NetworkSelectorProps){\n\n    function handleSelectNetwork(e){\n        props.selectNetwork(parseInt(e.target.value))\n    }\n\n    const network_list = conf.map((cfg, idx) => {\n        return (<option value={idx} key={idx}> {cfg.network} </option>)\n    })\n\n    return (\n        <div>\n            <HTMLSelect \n                onChange={handleSelectNetwork} \n                minimal={true} \n                defaultValue={props.activeConf} >\n                {network_list}\n            </HTMLSelect>\n        </div>\n    )\n}","import { AnchorButton, Alignment, Navbar } from '@blueprintjs/core';\nimport { SessionWallet } from 'algorand-session-wallet';\nimport React from 'react';\nimport {Minter} from './Minter';\nimport AlgorandWalletConnector from './AlgorandWalletConnector'\nimport {NFTViewer} from './NFTViewer'\nimport {Collection} from './Collection'\nimport { conf, sessionGetActiveConf, sessionSetActiveConf } from './lib/config';\nimport {NetworkSelector} from './NetworkSelector'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\n\n\ntype AppProps = {\n  history: History\n}\n\n\nfunction App(props: AppProps) {\n\n  const [activeConf, setActiveConf] = React.useState(sessionGetActiveConf())\n\n  const sw = new SessionWallet(conf[activeConf].network)\n\n\n  const [sessionWallet, setSessionWallet] =  React.useState(sw)\n  const [accts, setAccounts] = React.useState(sw.accountList())\n  const [connected, setConnected] = React.useState(sw.connected())\n\n  function updateWallet(sw: SessionWallet){ \n    setSessionWallet(sw)\n    setAccounts(sw.accountList())\n    setConnected(sw.connected())\n  }\n\n  function selectNetwork(idx: number){ \n    sessionSetActiveConf(idx)\n    setActiveConf(idx) \n  }\n\n  let collectionLink = <div></div>\n  if(connected){\n    collectionLink = <AnchorButton minimal={true} icon='folder-open' href={'/collection/'+sw.getDefaultAccount()} text='Collection' />\n  }\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>ARC3.xyz</Navbar.Heading>\n          <Navbar.Divider />\n          <AnchorButton minimal={true} icon='git-branch' href='https://github.com/barnjamin/arc3.xyz' text='Github' />\n          <AnchorButton minimal={true} icon='clean' href='/mint' text='Mint' />\n          {collectionLink}\n        </Navbar.Group>\n        <Navbar.Group  align={Alignment.RIGHT}>\n          <NetworkSelector activeConf={activeConf} selectNetwork={selectNetwork} />\n\n          <AlgorandWalletConnector  \n            darkMode={false}\n            sessionWallet={sessionWallet}\n            accts={accts}\n            connected={connected} \n            updateWallet={updateWallet}\n          />\n\n        </Navbar.Group>\n        </Navbar>\n        <Switch>\n          <Route exact path=\"/\" children={<Minter  activeConf={activeConf} sw={sessionWallet}></Minter>} />\n          <Route exact path=\"/mint\" children={ <Minter  activeConf={activeConf} sw={sessionWallet}></Minter> }/>\n          <Route path=\"/nft/:assetId\" children={ <NFTViewer activeConf={activeConf}  sw={sessionWallet} /> }/>\n          <Route path=\"/collection/:address\" children={ <Collection  activeConf={activeConf} sw={sessionWallet} /> }/>\n        </Switch>\n      </div>\n    </Router>\n  );\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {createBrowserHistory} from \"history\"\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App history={history} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}